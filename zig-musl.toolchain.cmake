set(CMAKE_SYSTEM_NAME Linux)
if(DEFINED ENV{TOOLCHAIN_TARGET})
    if($ENV{TOOLCHAIN_TARGET} STREQUAL "aarch64_be-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR aarch64_be)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "aarch64-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "armeb-linux-musleabi" )
        set(CMAKE_SYSTEM_PROCESSOR armeb)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "armeb-linux-musleabihf" )
        set(CMAKE_SYSTEM_PROCESSOR armeb)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "arm-linux-musleabi" )
        set(CMAKE_SYSTEM_PROCESSOR arm)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "arm-linux-musleabihf" )
        set(CMAKE_SYSTEM_PROCESSOR arm)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "thumb-linux-musleabi" )
        set(CMAKE_SYSTEM_PROCESSOR thumb)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "thumb-linux-musleabihf" )
        set(CMAKE_SYSTEM_PROCESSOR thumb)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "x86-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR x86)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "loongarch64-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR loongarch64)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "m68k-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR m68k)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "mips64el-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR mips64el)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "mips64-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR mips64)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "mipsel-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR mipsel)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "mips-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR mips)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "powerpc64le-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR powerpc64le)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "powerpc64-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR powerpc64)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "powerpc-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR powerpc)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "riscv32-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR riscv32)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "riscv64-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR riscv64)
        set(CMAKE_SIZEOF_VOID_P 8)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "s390x-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR s390x)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "wasm32-freestanding-musl" )
        set(CMAKE_SYSTEM_PROCESSOR wasm32)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "wasm32-wasi-musl" )
        set(CMAKE_SYSTEM_PROCESSOR wasm32)
        set(CMAKE_SIZEOF_VOID_P 4)
    elseif($ENV{TOOLCHAIN_TARGET} STREQUAL "x86_64-linux-musl" )
        set(CMAKE_SYSTEM_PROCESSOR x86_64)
        set(CMAKE_SIZEOF_VOID_P 8)
    else()
        message(FATAL_ERROR "TOOLCHAIN_TARGET: $ENV{TOOLCHAIN_TARGET} not supported!")
    endif()
else()
    message(FATAL_ERROR "TOOLCHAIN_TARGET env must be defined")
endif()

set(TOOLCHAIN_TARGET $ENV{TOOLCHAIN_TARGET} CACHE STRING "toolchain target")

set(CMAKE_C_COMPILER "${CMAKE_CURRENT_LIST_DIR}/zig-cc.sh" -target ${TOOLCHAIN_TARGET})
set(CMAKE_CXX_COMPILER "${CMAKE_CURRENT_LIST_DIR}/zig-c++.sh" -target ${TOOLCHAIN_TARGET})
set(CMAKE_AR "${CMAKE_CURRENT_LIST_DIR}/zig-ar.sh")
set(CMAKE_RANLIB "${CMAKE_CURRENT_LIST_DIR}/zig-ranlib.sh")

#set(CMAKE_C_COMPILER "zig" cc -target ${TOOLCHAIN_TARGET})
#set(CMAKE_CXX_COMPILER "zig" c++ -target ${TOOLCHAIN_TARGET})
#set(CMAKE_AR "zig" ar)
#set(CMAKE_RANLIB "zig" ranlib)

set(CMAKE_FIND_ROOT_PATH "${TOOLCHAIN_PATH}")

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
